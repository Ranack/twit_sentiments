name: Application Python

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
      # Récupération du code
      - uses: actions/checkout@v4
      
      # Configuration de Python
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      # Installation des dépendances
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 autopep8 black  # Installer les paquets nécessaires pour les linters

      # Démarrer l'API si nécessaire (assurez-vous que votre API est prête à être lancée)
      - name: Lancer l'API
        run: |
          nohup python app.py &  # Lance ton API en arrière-plan (assure-toi que c'est bien app.py ou l'entry point de ton API)

      # Attendre que l'API soit complètement lancée
      - name: Attendre que l'API soit prête
        run: |
          for i in {1..10}; do
            if curl --silent --fail http://127.0.0.1:5001; then
              echo "L'API est en ligne et prête !"
              break
            else
              echo "En attente du démarrage de l'API..."
              sleep 5
            fi
          done

      # Formatage du code avec autopep8 et black
      - run: |
          autopep8 --in-place --aggressive $(find . -name "*.py")
          black $(find . -name "*.py")

      # Vérification du code avec flake8
      - run: |
          flake8 . || exit 1  # Exécuter flake8 et échouer si des erreurs sont détectées

      # Exécution des tests
      - run: |
          pytest test_api.py  # Exécuter les tests après avoir vérifié que l'API est prête
