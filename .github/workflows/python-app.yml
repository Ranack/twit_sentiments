name: Python application

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          # Check for Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Allow warnings and check for complexity and line length
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Archive Flake8 report
        if: failure()
        run: |
          flake8 . --output-file=flake8-report.txt
        continue-on-error: true

      - name: Upload Flake8 report
        uses: actions/upload-artifact@v3
        with:
          name: flake8-report
          path: flake8-report.txt

      - name: Run tests
        run: |
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pytest

      - name: Cleanup
        run: |
          rm -rf *.log *.tmp

  docker:
    needs: build
    runs-on: ubuntu-latest
    if: success()

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-python-app:${{ github.sha }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/my-python-app:${{ github.sha }}
